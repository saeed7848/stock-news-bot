import requests
import yfinance as yf
import pandas as pd
import pandas_ta as ta
from googletrans import Translator
from config import TOKEN, CHAT_ID, TICKERS

BASE_URL = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
translator = Translator()

def send_message(msg):
    requests.post(BASE_URL, data={"chat_id": CHAT_ID, "text": msg})

def translate_text(text):
    try:
        return translator.translate(text, src="en", dest="ar").text
    except:
        return text

def get_news():
    # مكان تجيب أخبارك (مثال ثابت)
    news = [
        {
            "title": "Stock Exchanges Urge Regulators To Crack Down on 'Tokenised Stocks'",
            "url": "https://news.slashdot.org/story/25/08/25/162240/stock-exchanges-urge-regulators-to-crack-down-on-tokenised-stocks"
        }
    ]
    msgs = []
    for n in news:
        title_ar = translate_text(n["title"])
        msgs.append(f"📰 {title_ar}\n📎 {n['url']}")
    return msgs

def get_liquidity(symbol):
    try:
        tk = yf.Ticker(symbol)
        info = tk.fast_info
        price = float(info['last_price']) if 'last_price' in info else None

        hist = tk.history(period="60d", interval="1d")
        if hist.empty: return None

        vol_today = int(hist["Volume"].iloc[-1])
        avg20 = int(hist["Volume"].tail(20).mean())
        rvol = round(vol_today/avg20, 2) if avg20 else None
        turnover = round((price or 0) * vol_today, 2) if price else None

        df = hist.copy()
        df["SMA10"] = df["Close"].rolling(10).mean()
        df["SMA50"] = df["Close"].rolling(50).mean()
        df["SMA200"] = df["Close"].rolling(200).mean()
        recent = df.tail(20)
        resistance = round(recent["High"].max(), 2)
        support = round(recent["Low"].min(), 2)

        last = df.iloc[-1]
        return {
            "price": price,
            "volume": vol_today,
            "avg20": avg20,
            "rvol": rvol,
            "turnover": turnover,
            "sma10": round(last["SMA10"], 2) if pd.notna(last["SMA10"]) else None,
            "sma50": round(last["SMA50"], 2) if pd.notna(last["SMA50"]) else None,
            "sma200": round(last["SMA200"], 2) if pd.notna(last["SMA200"]) else None,
            "support": support,
            "resistance": resistance
        }
    except Exception:
        return None

def format_stock_msg(symbol):
    liq = get_liquidity(symbol)
    if not liq:
        return f"⚠️ ما قدرت أجيب بيانات {symbol}."

    msg = f"""
🚀 {symbol}
💵 السعر: {liq['price']}
📊 حجم اليوم: {liq['volume']:,}
📈 متوسط 20 يوم: {liq['avg20']:,}
🔥 RVOL: {liq['rvol']}x
💰 قيمة التداول: {liq['turnover']:,}

🧭 دعم: {liq['support']} | مقاومة: {liq['resistance']}
SMA10: {liq['sma10']} | SMA50: {liq['sma50']} | SMA200: {liq['sma200']}
"""
    return msg

def main():
    # الأخبار
    for n in get_news():
        send_message(n)

    # السيولة للأسهم
    for sym in TICKERS:
        send_message(format_stock_msg(sym))

if __name__ == "__main__":
    main()