import time
import requests
import yfinance as yf
import pandas as pd
import pandas_ta as ta
from googletrans import Translator
from datetime import datetime, timezone

from config import TOKEN, CHAT_ID, TICKERS, NEWSAPI_KEY, INTERVAL_MIN, RSI_MIN, RSI_MAX

TG_URL = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
translator = Translator()

COMPANY_BY_SYMBOL = {
    "AAPL": "Apple", "TSLA": "Tesla", "NVDA": "NVIDIA",
    "MSFT": "Microsoft", "AMD": "Advanced Micro Devices",
}

def send_message(text: str):
    try:
        requests.post(TG_URL, data={"chat_id": CHAT_ID, "text": text})
    except Exception as e:
        print("Telegram send error:", e)

def news_for_symbol(symbol: str):
    try:
        q = f'"{symbol}" OR "{COMPANY_BY_SYMBOL.get(symbol, symbol)}" stocks'
        url = "https://newsapi.org/v2/everything"
        params = {
            "q": q, "pageSize": 1, "sortBy": "publishedAt",
            "language": "en", "apiKey": NEWSAPI_KEY
        }
        r = requests.get(url, params=params, timeout=15)
        arts = (r.json() or {}).get("articles") or []
        if not arts: return None
        a = arts[0]
        title = a.get("title") or ""
        desc  = a.get("description") or ""
        link  = a.get("url") or ""
        src   = (a.get("source") or {}).get("name", "")

        # ترجم
        try:
            title_ar = translator.translate(title, dest="ar").text if title else ""
            desc_ar  = translator.translate(desc,  dest="ar").text if desc  else ""
        except Exception:
            title_ar, desc_ar = title, desc

        ts = ""
        if a.get("publishedAt"):
            try:
                dt = datetime.fromisoformat(a["publishedAt"].replace("Z","+00:00")).astimezone(timezone.utc)
                ts = dt.strftime("%Y-%m-%d %H:%M UTC")
            except Exception:
                pass

        block = f"📰 خبر متعلق بـ {symbol}\nالعنوان: {title_ar}"
        if desc_ar: block += f"\nالتفاصيل: {desc_ar}"
        if ts:      block += f"\n📅 الوقت: {ts}"
        if link:    block += f"\n🔗 {link}"
        if src:     block += f"\n📌 المصدر: {src}"
        return block
    except Exception as e:
        print("news error:", e)
        return None

def analyze_stock(symbol: str):
    try:
        tk  = yf.Ticker(symbol)
        # إطار 15م لقياس RSI أسبوعياً (زخم)
        df  = tk.history(period="7d", interval="15m", auto_adjust=False)
        if df.empty or len(df) < 50: return None
        price = float(df["Close"].iloc[-1])

        rsi = ta.rsi(df["Close"], length=14).iloc[-1]
        if pd.isna(rsi): return None
        if not (RSI_MIN <= float(rsi) <= RSI_MAX): return None

        # دعم/مقاومة من آخر 7 أيام يومية
        dfd = tk.history(period="7d", interval="1d", auto_adjust=False)
        if dfd.empty: return None
        resistance = float(dfd["High"].max())
        support    = float(dfd["Low"].min())

        target1 = round(price * 1.05, 2)
        target2 = round(price * 1.10, 2)
        stop    = round(support, 2)

        news_block = news_for_symbol(symbol)  # قد تكون None

        lines = [
            f"🚀 سهم: {symbol}",
            f"💵 السعر الآن: {round(price,2)}",
            f"📈 المقاومة: {round(resistance,2)}",
            f"📉 الدعم (وقف): {round(support,2)}",
            f"🎯 الهدف 1: {target1}",
            f"🎯 الهدف 2: {target2}",
            f"📊 RSI(14): {round(float(rsi),2)} ضمن {RSI_MIN}-{RSI_MAX}",
        ]
        if news_block:
            lines += ["—", news_block]
        return "\n".join(lines)
    except Exception as e:
        print("analyze error:", symbol, e)
        return None

def run_once():
    found = False
    for sym in TICKERS:
        msg = analyze_stock(sym)
        if msg:
            send_message(msg); found = True
    if not found:
        send_message(f"ℹ️ لا توجد أسهم تحقق RSI بين {RSI_MIN}-{RSI_MAX} حالياً.")

def main():
    send_message("✅ البوت بدأ العمل (زخم + خبر + مستويات)")
    while True:
        run_once()
        time.sleep(int(INTERVAL_MIN) * 60)

if __name__ == "__main__":
    main()